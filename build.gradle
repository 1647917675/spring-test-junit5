buildscript {
	repositories {
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	}
	dependencies {
		classpath 'org.junit:junit-gradle:5.0.0-SNAPSHOT'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.junit.gen5.gradle'

jar {
	baseName = 'spring-test-junit5'
	version = '1.0.0-SNAPSHOT'
}

group = 'org.springframework.test'

ext.hamcrestVersion   = '1.3'
ext.jacksonVersion    = '2.7.0'
ext.jsonpathVersion   = '2.1.0'
ext.junit5Version     = '5.0.0-SNAPSHOT'
ext.log4JVersion      = '2.5'
ext.servletApiVersion = '3.1.0'
ext.springVersion     = '4.3.0.RC2'

repositories {
	mavenCentral()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	maven { url 'https://repo.spring.io/libs-snapshot' }
}

dependencies {
	compile("org.springframework:spring-context:${springVersion}")
	compile("org.springframework:spring-test:${springVersion}")
	compile("org.junit:junit5-api:${junit5Version}")
	testCompile("org.springframework:spring-webmvc:${springVersion}")
	testCompile("javax.servlet:javax.servlet-api:${servletApiVersion}")
	testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
	testCompile("com.jayway.jsonpath:json-path:${jsonpathVersion}")
	testCompile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
	testRuntime("org.junit:junit-console:${junit5Version}")
	testRuntime("org.junit:junit5-engine:${junit5Version}")
	testRuntime("org.apache.logging.log4j:log4j-core:${log4JVersion}")
	testRuntime("org.apache.logging.log4j:log4j-jul:${log4JVersion}")
	testRuntime("org.apache.logging.log4j:log4j-jcl:${log4JVersion}")
	testRuntime("org.apache.logging.log4j:log4j-slf4j-impl:${log4JVersion}")

	// Include JUnit 4 to use JUnit5 Runner within the IDE
	testCompile("org.junit:junit4-runner:${junit5Version}")
}

compileJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	options.compilerArgs += '-parameters'
}

junit5 {
	version "${junit5Version}"
	matchClassName '.*Tests'
	logManager 'org.apache.logging.log4j.jul.LogManager'
	runJunit4 false
}

test {
	// Ensure that Gradle does not run our tests with JUnit 4, since
	// the JUnit 4 based test suite would then execute all JUnit 5
	// tests a second time.
	exclude '**/**'
}

javadoc {
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.name
	options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

configurations.all {
	// Do NOT cache snapshot JARs for more than 60 seconds.
	resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.13'
}
